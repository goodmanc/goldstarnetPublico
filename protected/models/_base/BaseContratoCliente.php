<?php

/**
 * This is the model base class for the table "contratocliente".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ContratoCliente".
 *
 * Columns in table "contratocliente" available as properties of the model,
 * followed by relations of table "contratocliente" available as properties of the model.
 *
 * @property integer $id
 * @property integer $temporada_id
 * @property integer $cliente_id
 * @property string $proyecto_id
 * @property string $fecha
 * @property string $observaciones
 * @property string $guarantee
 * @property string $conditionsHeader
 * @property string $conditionsFooter
 * @property string $growerServices
 * @property string $stockSeed
 * @property string $productionReports
 * @property string $shipments
 * @property string $aditionalPhitosanitaryReq
 * @property string $preShipmentsSeedSamples
 * @property string $earlyTerminationBuyOut
 * @property string $overProduction
 * @property string $prices
 * @property string $advancePayments
 * @property string $paymentTerms
 * @property string $confidentiality
 * @property string $lotNumberAssignment
 * @property string $arbitrationAndLaw
 * @property string $buyerSigName
 * @property string $growerSigName
 * @property string $status
 * @property integer $used_by
 * @property string $check_in
 * @property integer $created_by
 * @property string $created
 * @property integer $modified_by
 * @property string $modified
 *
 * @property Condiciones[] $condiciones
 * @property Cliente $cliente
 * @property Proyecto $proyecto
 * @property Temporada $temporada
 */
abstract class BaseContratoCliente extends AweActiveRecord {


    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'contratocliente';
    }

    public static function representingColumn() {
        return 'status';
    }

    public function rules() {
        return array(
            array(	'temporada_id, cliente_id, proyecto_id',
					'required',
					'message' => Yii::t('app', 'Field is required')
			),
            array(	'temporada_id, cliente_id, used_by, created_by, modified_by',
					'numerical',
					'integerOnly'=>true
			),
            array(	'proyecto_id',
					'length',
					'max'=>20,
					'tooLong' => Yii::t('app', 'Field is required')
			),
            array(	'buyerSigName, growerSigName',
					'length',
					'max'=>50,
					'tooLong' => Yii::t('app', 'Field is required')
			),
            array(	'status',
					'length',
					'max'=>1,
					'tooLong' => Yii::t('app', 'Field is required')
			),
            array(	'fecha, observaciones, guarantee, conditionsHeader, conditionsFooter, growerServices, stockSeed, productionReports, shipments, aditionalPhitosanitaryReq, preShipmentsSeedSamples, earlyTerminationBuyOut, overProduction, prices, advancePayments, paymentTerms, confidentiality, lotNumberAssignment, arbitrationAndLaw, check_in, created, modified',
					'safe'
			),
            array('fecha, observaciones, guarantee, conditionsHeader, conditionsFooter, growerServices, stockSeed, productionReports, shipments, aditionalPhitosanitaryReq, preShipmentsSeedSamples, earlyTerminationBuyOut, overProduction, prices, advancePayments, paymentTerms, confidentiality, lotNumberAssignment, arbitrationAndLaw, buyerSigName, growerSigName, status, used_by, check_in, created_by, created, modified_by, modified',
					'default',
					'setOnEmpty' => true,
					'value' => null
			),
            array('id, temporada_id, cliente_id, proyecto_id, fecha, observaciones, guarantee, conditionsHeader, conditionsFooter, growerServices, stockSeed, productionReports, shipments, aditionalPhitosanitaryReq, preShipmentsSeedSamples, earlyTerminationBuyOut, overProduction, prices, advancePayments, paymentTerms, confidentiality, lotNumberAssignment, arbitrationAndLaw, buyerSigName, growerSigName, status, used_by, check_in, created_by, created, modified_by, modified', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
            'condiciones' => array(self::HAS_MANY, 'Condiciones', 'contratoCliente_id'),
            'cliente' => array(self::BELONGS_TO, 'Cliente', 'cliente_id'),
            'proyecto' => array(self::BELONGS_TO, 'Proyecto', 'proyecto_id'),
            'temporada' => array(self::BELONGS_TO, 'Temporada', 'temporada_id'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'id' => Yii::t('app', 'ID'),
                'temporada_id' => Yii::t('app', 'Temporada'),
                'cliente_id' => Yii::t('app', 'Cliente'),
                'proyecto_id' => Yii::t('app', 'Proyecto'),
                'fecha' => Yii::t('app', 'Fecha'),
                'observaciones' => Yii::t('app', 'Observaciones'),
                'guarantee' => Yii::t('app', 'Guarantee'),
                'conditionsHeader' => Yii::t('app', 'Conditions Header'),
                'conditionsFooter' => Yii::t('app', 'Conditions Footer'),
                'growerServices' => Yii::t('app', 'Grower Services'),
                'stockSeed' => Yii::t('app', 'Stock Seed'),
                'productionReports' => Yii::t('app', 'Production Reports'),
                'shipments' => Yii::t('app', 'Shipments'),
                'aditionalPhitosanitaryReq' => Yii::t('app', 'Aditional Phitosanitary Req'),
                'preShipmentsSeedSamples' => Yii::t('app', 'Pre Shipments Seed Samples'),
                'earlyTerminationBuyOut' => Yii::t('app', 'Early Termination Buy Out'),
                'overProduction' => Yii::t('app', 'Over Production'),
                'prices' => Yii::t('app', 'Prices'),
                'advancePayments' => Yii::t('app', 'Advance Payments'),
                'paymentTerms' => Yii::t('app', 'Payment Terms'),
                'confidentiality' => Yii::t('app', 'Confidentiality'),
                'lotNumberAssignment' => Yii::t('app', 'Lot Number Assignment'),
                'arbitrationAndLaw' => Yii::t('app', 'Arbitration And Law'),
                'buyerSigName' => Yii::t('app', 'Buyer Sig Name'),
                'growerSigName' => Yii::t('app', 'Grower Sig Name'),
                'status' => Yii::t('app', 'Status'),
                'used_by' => Yii::t('app', 'Used By'),
                'check_in' => Yii::t('app', 'Check In'),
                'created_by' => Yii::t('app', 'Created By'),
                'created' => Yii::t('app', 'Created'),
                'modified_by' => Yii::t('app', 'Modified By'),
                'modified' => Yii::t('app', 'Modified'),
                'condiciones' => null,
                'cliente' => null,
                'proyecto' => null,
                'temporada' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('temporada_id', $this->temporada_id);
        $criteria->compare('cliente_id', $this->cliente_id);
        $criteria->compare('proyecto_id', $this->proyecto_id);
        $criteria->compare('fecha', $this->fecha, true);
        $criteria->compare('observaciones', $this->observaciones, true);
        $criteria->compare('guarantee', $this->guarantee, true);
        $criteria->compare('conditionsHeader', $this->conditionsHeader, true);
        $criteria->compare('conditionsFooter', $this->conditionsFooter, true);
        $criteria->compare('growerServices', $this->growerServices, true);
        $criteria->compare('stockSeed', $this->stockSeed, true);
        $criteria->compare('productionReports', $this->productionReports, true);
        $criteria->compare('shipments', $this->shipments, true);
        $criteria->compare('aditionalPhitosanitaryReq', $this->aditionalPhitosanitaryReq, true);
        $criteria->compare('preShipmentsSeedSamples', $this->preShipmentsSeedSamples, true);
        $criteria->compare('earlyTerminationBuyOut', $this->earlyTerminationBuyOut, true);
        $criteria->compare('overProduction', $this->overProduction, true);
        $criteria->compare('prices', $this->prices, true);
        $criteria->compare('advancePayments', $this->advancePayments, true);
        $criteria->compare('paymentTerms', $this->paymentTerms, true);
        $criteria->compare('confidentiality', $this->confidentiality, true);
        $criteria->compare('lotNumberAssignment', $this->lotNumberAssignment, true);
        $criteria->compare('arbitrationAndLaw', $this->arbitrationAndLaw, true);
        $criteria->compare('buyerSigName', $this->buyerSigName, true);
        $criteria->compare('growerSigName', $this->growerSigName, true);
        $criteria->compare('status', $this->status, true);
        $criteria->compare('used_by', $this->used_by);
        $criteria->compare('check_in', $this->check_in, true);
        $criteria->compare('created_by', $this->created_by);
        $criteria->compare('created', $this->created, true);
        $criteria->compare('modified_by', $this->modified_by);
        $criteria->compare('modified', $this->modified, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
        ), parent::behaviors());
    }
}