<?php

/**
 * This is the model base class for the table "condiciones".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Condiciones".
 *
 * Columns in table "condiciones" available as properties of the model,
 * followed by relations of table "condiciones" available as properties of the model.
 *
 * @property integer $id
 * @property integer $oventa_id
 * @property integer $condicion_id
 * @property double $valor
 * @property string $prefix_copy1
 * @property string $sufix
 * @property string $status
 * @property integer $used_by
 * @property string $check_in
 * @property integer $created_by
 * @property string $created
 * @property integer $modified_by
 * @property string $modified
 *
 * @property Contratocliente $oventa
 * @property Condicion $condicion
 */
abstract class BaseCondiciones extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'condiciones';
    }

    public static function representingColumn() {
        return 'prefix_copy1';
    }

    public function rules() {
        return array(
            array(	'oventa_id, condicion_id, valor, prefix_copy1, sufix',
					'required',
					'message' => Yii::t('app', 'Field is required')
			),
            array(	'oventa_id, condicion_id, used_by, created_by, modified_by',
					'numerical',
					'integerOnly'=>true
			),
            array(	'valor',
					'numerical'
			),
            array(	'prefix_copy1, sufix',
					'length',
					'max'=>20,
					'tooLong' => Yii::t('app', 'Field is required')
			),
            array(	'status',
					'length',
					'max'=>1,
					'tooLong' => Yii::t('app', 'Field is required')
			),
            array(	'check_in, created, modified',
					'safe'
			),
            array('status, used_by, check_in, created_by, created, modified_by, modified',
					'default',
					'setOnEmpty' => true,
					'value' => null
			),
            array('id, oventa_id, condicion_id, valor, prefix_copy1, sufix, status, used_by, check_in, created_by, created, modified_by, modified', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
            'oventa' => array(self::BELONGS_TO, 'Contratocliente', 'oventa_id'),
            'condicion' => array(self::BELONGS_TO, 'Condicion', 'condicion_id'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'id' => Yii::t('app', 'ID'),
                'oventa_id' => Yii::t('app', 'Oventa'),
                'condicion_id' => Yii::t('app', 'Condicion'),
                'valor' => Yii::t('app', 'Valor'),
                'prefix_copy1' => Yii::t('app', 'Prefix Copy1'),
                'sufix' => Yii::t('app', 'Sufix'),
                'status' => Yii::t('app', 'Status'),
                'used_by' => Yii::t('app', 'Used By'),
                'check_in' => Yii::t('app', 'Check In'),
                'created_by' => Yii::t('app', 'Created By'),
                'created' => Yii::t('app', 'Created'),
                'modified_by' => Yii::t('app', 'Modified By'),
                'modified' => Yii::t('app', 'Modified'),
                'oventa' => null,
                'condicion' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('oventa_id', $this->oventa_id);
        $criteria->compare('condicion_id', $this->condicion_id);
        $criteria->compare('valor', $this->valor);
        $criteria->compare('prefix_copy1', $this->prefix_copy1, true);
        $criteria->compare('sufix', $this->sufix, true);
        $criteria->compare('status', $this->status, true);
        $criteria->compare('used_by', $this->used_by);
        $criteria->compare('check_in', $this->check_in, true);
        $criteria->compare('created_by', $this->created_by);
        $criteria->compare('created', $this->created, true);
        $criteria->compare('modified_by', $this->modified_by);
        $criteria->compare('modified', $this->modified, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
        ), parent::behaviors());
    }
}